plugins {
    id 'multiloader-loader'
    id 'net.neoforged.moddev.legacyforge'
    id 'net.darkhax.curseforgegradle' version '1.+'
    id "com.modrinth.minotaur" version "2.+"
}
base {
    archivesName = "${mod_name}-forge-${minecraft_version}"
}
mixin {
    add(sourceSets.main, "${mod_id}.refmap.json")
    config("${mod_id}.mixins.json")
}

legacyForge {
    version = "${minecraft_version}-${forge_version}"

    validateAccessTransformers = true

    def at = project(':common').file('src/main/resources/META-INF/accesstransformer.cfg')
    if (at.exists()) {
        accessTransformers = ["src/main/resources/META-INF/accesstransformer.cfg"]
    }
    parchment {
        minecraftVersion = parchment_minecraft
        mappingsVersion = parchment_version
    }
    runs {
        client {
            client()
            jvmArgument("-Dmixin.debug.export=true")
        }
        data {
            data()
            programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
        }
        server {
            server()
        }
    }

    mods {
        "${mod_id}" {
            sourceSet sourceSets.main
        }
    }
}

sourceSets.main.resources.srcDir 'src/generated/resources'

dependencies {
    annotationProcessor("org.spongepowered:mixin:0.8.5-SNAPSHOT:processor")

    compileOnly(annotationProcessor("io.github.llamalad7:mixinextras-common:0.4.1"))
//    implementation("io.github.llamalad7:mixinextras-forge:0.4.1")
//    implementation("io.github.llamalad7:mixinextras-forge:0.4.1")
    implementation(jarJar("io.github.llamalad7:mixinextras-forge:0.4.1"))
    // Forge's hack fix
    implementation('net.sf.jopt-simple:jopt-simple:5.0.4') { version { strictly '5.0.4' } }
}

sourceSets.each {
    def dir = layout.buildDirectory.dir("sourcesSets/$it.name")
    it.output.resourcesDir = dir
    it.java.destinationDirectory = dir
}

jar {
    finalizedBy('reobfJar')
    manifest.attributes([
            "MixinConfigs": "${mod_id}.mixins.json"
    ])
    dependsOn "processDocs"
}

task processDocs(type: Copy) {
    // update docs
    from(file("../doc/")) {
        include '*.md'
        expand 'loaderversion': project.forge_version,
                'loadername': "Forge"
    }
    into 'build/doc'
}

if (!project.hasProperty("curseForgeApiKey")) {
    ext.curseForgeApiKey = project.findProperty("curseforge_api_key") ?: "notset"
}
if (!project.hasProperty("modrinthApiKey")) {
    ext.modrinthApiKey = project.findProperty("modrinth_api_key") ?: "notset"
}

task publishCurseForge(type: net.darkhax.curseforgegradle.TaskPublishCurseForge) {
    apiToken = "${curseForgeApiKey}"
    def mainFile = upload(curseforge_project_id, jar)
    mainFile.displayName = "${mod_name}-${minecraft_version}-${version}-forge"
    mainFile.releaseType = release_type
    mainFile.addModLoader("Forge")
    mainFile.addJavaVersion("Java 21")
    mainFile.addGameVersion("${project.minecraft_version}")
    mainFile.addEnvironment("Client")
    mainFile.changelogType = "markdown"
    mainFile.changelog = file("$project.buildDir/doc/changelog.md")
}

tasks.modrinth.dependsOn(tasks.build)

modrinth {
//    debugMode.set(true)
    token = "${modrinthApiKey}"
    projectId = modrinth_project_id
    versionNumber = "${minecraft_version}-${version}-forge"
    versionName = "${mod_name}-${minecraft_version}-${version}-forge"
    versionType = release_type
    uploadFile = jar
    gameVersions = ["${project.minecraft_version}"]
    loaders = ["forge"]
    changelog = file("$project.buildDir/doc/changelog.md").exists() ? file("$project.buildDir/doc/changelog.md").text : null
}

project.afterEvaluate {
    project.tasks.findAll { task -> (task.name.startsWith('curseforge') || task.name.startsWith('modrinth'))
    }.each {
        projectTask -> projectTask.dependsOn build
    }
}

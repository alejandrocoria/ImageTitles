plugins {
    id 'multiloader-loader'
    id 'net.minecraftforge.gradle' version '[6.0.24,6.2)'
    id 'org.spongepowered.mixin' version '0.7-SNAPSHOT'
    id 'net.darkhax.curseforgegradle' version '1.+'
    id "com.modrinth.minotaur" version "2.+"
}
base {
    archivesName = "${mod_name}-forge-${minecraft_version}"
}
mixin {
    config("${mod_id}.mixins.json")
}
jar {
    manifest {
        attributes["MixinConfigs"] = "${mod_id}.mixins.json,${mod_id}.forge.mixins.json"
    }
}

minecraft {
    mappings channel: 'official', version: minecraft_version

    copyIdeResources = true //Calls processResources when in dev

    reobf = false // Forge 1.20.6+ uses official mappings at runtime, so we shouldn't reobf from official to SRG

    // Automatically enable forge AccessTransformers if the file exists
    // This location is hardcoded in Forge and can not be changed.
    // https://github.com/MinecraftForge/MinecraftForge/blob/be1698bb1554f9c8fa2f58e32b9ab70bc4385e60/fmlloader/src/main/java/net/minecraftforge/fml/loading/moddiscovery/ModFile.java#L123
    // Forge still uses SRG names during compile time, so we cannot use the common AT's
    def at = file('src/main/resources/META-INF/accesstransformer.cfg')
    if (at.exists()) {
        accessTransformer = at
    }

    runs {
        client {
            workingDirectory file('runs/client')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Client'
            property "mixin.debug.export", "true"
            mods {
                modClientRun {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory file('runs/server')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Server'
            mods {
                modServerRun {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory file('runs/data')
            ideaModule "${rootProject.name}.${project.name}.main"
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            taskName 'Data'
            mods {
                modDataRun {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources.srcDir 'src/generated/resources'

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    annotationProcessor("org.spongepowered:mixin:0.8.5-SNAPSHOT:processor")

    compileOnly(annotationProcessor("io.github.llamalad7:mixinextras-common:0.3.5"))
    implementation("io.github.llamalad7:mixinextras-forge:0.3.5")
    // Forge's hack fix
    implementation('net.sf.jopt-simple:jopt-simple:5.0.4') { version { strictly '5.0.4' } }
}

sourceSets.each {
    def dir = layout.buildDirectory.dir("sourcesSets/$it.name")
    it.output.resourcesDir = dir
    it.java.destinationDirectory = dir
}

jar {
    dependsOn "processDocs"
}

task processDocs(type: Copy) {
    // update docs
    from(file("../doc/")) {
        include '*.md'
        expand 'loaderversion': project.forge_version,
                'loadername': "Forge"
    }
    into 'build/doc'
}

if (!project.hasProperty("curseForgeApiKey")) {
    ext.curseForgeApiKey = project.findProperty("curseforge_api_key") ?: "notset"
}
if (!project.hasProperty("modrinthApiKey")) {
    ext.modrinthApiKey = project.findProperty("modrinth_api_key") ?: "notset"
}

task publishCurseForge(type: net.darkhax.curseforgegradle.TaskPublishCurseForge) {
    apiToken = "${curseForgeApiKey}"
    def mainFile = upload(curseforge_project_id, jar)
    mainFile.displayName = "${mod_name}-${minecraft_version}-${version}-forge"
    mainFile.releaseType = release_type
    mainFile.addModLoader("Forge")
    mainFile.addJavaVersion("Java 21")
    mainFile.addGameVersion("${project.minecraft_version}")
    mainFile.addEnvironment("Client")
    mainFile.changelogType = "markdown"
    mainFile.changelog = file("$project.buildDir/doc/changelog.md")
}

tasks.modrinth.dependsOn(tasks.build)

modrinth {
//    debugMode.set(true)
    token = "${modrinthApiKey}"
    projectId = modrinth_project_id
    versionNumber = "${minecraft_version}-${version}-forge"
    versionName = "${mod_name}-${minecraft_version}-${version}-forge"
    versionType = release_type
    uploadFile = jar
    gameVersions = ["${project.minecraft_version}"]
    loaders = ["forge"]
    changelog = file("$project.buildDir/doc/changelog.md").exists() ? file("$project.buildDir/doc/changelog.md").text : null
}

project.afterEvaluate {
    project.tasks.findAll { task -> (task.name.startsWith('curseforge') || task.name.startsWith('modrinth'))
    }.each {
        projectTask -> projectTask.dependsOn build
    }
}
